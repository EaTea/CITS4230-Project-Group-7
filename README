A CITS4230 Project at UWA:
Build a database-driven web application using Ruby on Rails, HTML, CSS and ECMAScript.

Requirements:
- A PHP and Ruby-on-Rails capable server.
- crontab is needed for the email reminders.

Setup:
1. Modify the .htaccess file inside `public_html` if necessary to point to the
   correct location for the rails base location.
2. Add emailer credidentials into `todo/config/initializers/setup_mail.rb`.
   Note: Just editing the "user_name" and "password" maps should be sufficient
   for local testing on port 3000.
3. Sync the `public_html` into the directory where the site should be shown.
   Note: Make sure all symlinks are kept otherwise links will break.
4. Sync the `todo` into the same folder as `public_html`.
   Note: Make sure all symlinks are kept otherwise links will break.
5. Add the contents of `crontab` into the system's crontab.
6. Access the site in `public_html`.

Helper scripts included in this repo:

./upload
Syncs the contents of a local "public_html" directory to a sub-directory of your
CSSE student WWW directory.
Variables:
  CLEAR - Set this to 1 to delete extraneous files from destination dirs.
  ID - Set this to pass your student ID.
  SUBDIR - Set this to change the sub-directory.
Example usage:
  CLEAR=1 ID=12345678 ./upload

./rails-local
Starts up a rails server on the local machine.
Variables:
  PORT - Set this value to change the port to use from 3000
Example usage:
  ./rails-local

./rails-remote
Syncs the contents of a local "todo" directory to the group server.
Variables:
  TMPDIR - Set this to change the tmp directory used on your remote account.
  ID - Set this to pass your student ID.
Example usage:
  ID=12345678 ./rails-remote

./group-upload
Uploads the whole project up to the group server.
This calls ./upload and ./rails-remote so the variables are the same.
